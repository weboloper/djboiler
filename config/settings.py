"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from decouple import Config,Csv, RepositoryEnv
import os
from datetime import timedelta 

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

ENVIRONMENT = os.getenv('DJANGO_ENV', 'dev')

env_file =  f".env.{ENVIRONMENT}"

if not os.path.exists(env_file):
    raise FileNotFoundError(f"The environment file {env_file} does not exist. Please create it.")

config = Config(RepositoryEnv(env_file))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY =  config('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG')

ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv(), default=["localhost", "127.0.0.1"])
CORS_ALLOWED_ORIGINS = config('CORS_ALLOWED_ORIGINS', cast=Csv(), default=["localhost", "127.0.0.1"])

FRONTEND_URL=config('FRONTEND_URL')
SITE_URL=config('SITE_URL')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic',
    'django.contrib.staticfiles',
    'django_celery_beat',
    'django_celery_results',
    'csp',
    'storages',
    'corsheaders',
    'streamblocks',
    'streamfield',
    'django_filters',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'core',
    'pages',
    'accounts'
]

MIDDLEWARE = [
    'csp.middleware.CSPMiddleware',  # Add this line
    'django.middleware.security.SecurityMiddleware',
    'config.middleware.SecurityHeadersMiddleware',  # Add custom security headers middleware
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS':  [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': config('DB_ENGINE', default='django.db.backends.sqlite3'),
        'NAME': config('DB_NAME', default=BASE_DIR / 'db.sqlite3'),
        'USER': config('DB_USER', default=''),
        'PASSWORD': config('DB_PASSWORD', default=''),
        'HOST': config('DB_HOST', default=''),
        'PORT': config('DB_PORT', default=''),
    }
}

# Authentication

AUTH_USER_MODEL = 'accounts.User'

AUTHENTICATION_BACKENDS = [
    'accounts.backends.EmailOrUsernameModelBackend',
    # 'django.contrib.auth.backends.ModelBackend',
]


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'tr-TR'

TIME_ZONE = 'Europe/Istanbul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [BASE_DIR / 'static',]

MEDIA_URL = '/uploads/'
MEDIA_ROOT = BASE_DIR / 'uploads'

# Storage Backend Configuration
STORAGE_BACKEND = config('STORAGE_BACKEND', default='local')  # Options: 's3', 'ngnix', 'whitenoise', 'local'

# S3 Storage Backend Configuration
if STORAGE_BACKEND == 's3':
    # AWS S3 Configuration for Static and Media
    AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME')
    AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
    AWS_S3_REGION_NAME = config('AWS_S3_REGION_NAME', default="eu-north-1")
    AWS_S3_SIGNATURE_VERSION = 's3v4'
    
    # Set storage backends for both static and media files
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

    # Additional AWS settings
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',  # Optimize caching
    }
    AWS_S3_FILE_OVERWRITE = False  # Prevent overwriting files
    AWS_QUERYSTRING_AUTH = False  # Public URLs for static/media files
    AWS_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"
    AWS_DEFAULT_ACL = None  # Avoids issues with public/private access

elif STORAGE_BACKEND == 'ngnix':
    # Nginx (File system storage) setup for both static and media
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'

    STATIC_ROOT = config('STATIC_ROOT', default=os.path.join(BASE_DIR, 'staticfiles'))
    MEDIA_ROOT = config('MEDIA_ROOT', default=os.path.join(BASE_DIR, 'uploads'))

elif STORAGE_BACKEND == 'whitenoise':
    # Use Whitenoise for static file handling in production (commonly used with Heroku or Docker)
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'

    # Whitenoise doesn't handle media, so we keep media as local storage
    MEDIA_URL = '/uploads/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')

else:
    # Local file system storage (default for development)
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
    
FILE_UPLOAD_PERMISSIONS = 0o644  # Ensures uploaded files are readable by web server

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#REST FRAMEWORK

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
        'rest_framework.permissions.IsAuthenticated'
    ],
     'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    # 'EXCEPTION_HANDLER': 'app.utils.custom_exception_handler',
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "10/minute",  # Limit unauthenticated users to 10 requests per minute
        "user": "50/minute",  # Limit authenticated users to 50 requests per minute
    },
  
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=3),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
}

CSRF_COOKIE_SAMESITE = "Lax"
SESSION_COOKIE_SAMESITE = "Lax"
CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_HTTPONLY = True


# Auto-reconnect on startup
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True

# Optionally, configure Celery Beat (task scheduler) in production
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers.DatabaseScheduler'

# Production settings 
if config('CELERY_BROKER') == "redis":
    CELERY_RESULT_BACKEND="django-db"
    CELERY_BROKER_URL= config("CELERY_BROKER_REDIS_URL", default="redis://localhost:6379")
    CELERY_TASK_ALWAYS_EAGER = False  # Run tasks asynchronously in production
    CELERYD_POOL = 'prefork'
else:
    CELERY_RESULT_BACKEND="django-db"
    CELERY_BROKER_URL="sqla+sqlite:///celerydb.sqlite3"
    CELERY_TASK_ALWAYS_EAGER = True  # Run tasks synchronously in development
    CELERYD_POOL = 'solo'
    


if config('EMAIL_BACKEND') == "smtp":
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_USE_TLS = config("EMAIL_USE_TLS", default=True, cast=bool)
    EMAIL_USE_SSL = config("EMAIL_USE_SSL", default=False, cast=bool)  # Optional
    EMAIL_HOST = config('SMTP_EMAIL_HOST', default='smtp.gmail.com')
    EMAIL_PORT = config('SMTP_EMAIL_PORT', default=587, cast=int)
    EMAIL_HOST_USER = config('SMTP_EMAIL_USER')
    EMAIL_HOST_PASSWORD = config('SMTP_EMAIL_PASSWORD')
    DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default="webmaster@example.com")
else:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"


if not DEBUG and ENVIRONMENT != 'dev':
    # Enforce HTTPS connections
    SECURE_SSL_REDIRECT = True  # Redirect all HTTP traffic to HTTPS
    SECURE_HSTS_SECONDS = 31536000  # Enable HSTS for one year (recommended)
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # Apply HSTS to subdomains
    SECURE_HSTS_PRELOAD = True  # Allow browser preload list (optional)
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True


    SECURE_SSL_REDIRECT=True

    # Prevent MIME-type sniffing
    SECURE_CONTENT_TYPE_NOSNIFF = True  

    # Prevent clickjacking attacks
    X_FRAME_OPTIONS = "DENY"  # Options: DENY, SAMEORIGIN

    # Enable browser XSS protection
    SECURE_BROWSER_XSS_FILTER = True  

    # Referrer Policy
    SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"  

    # Permissions Policy (limits access to browser features)
    PERMISSIONS_POLICY = {
        "geolocation": "self",
        "microphone": "none",
        "camera": "none",
        "fullscreen": "self",
        }


# Allow scripts and styles only from the same origin and specific sources
CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = (
    "'self'", 
    "cdnjs.cloudflare.com", 
    "https://accounts.google.com", 
    "https://apis.google.com", 
    "https://www.gstatic.com", 
    "'unsafe-inline'",  # Allow inline scripts, cautiously
)
CSP_STYLE_SRC = (
    "'self'", 
    "fonts.googleapis.com", 
    "https://accounts.google.com/gsi/style", 
    "'unsafe-inline'",  # Allow inline styles cautiously
)
CSP_IMG_SRC = ("'self'", "data:", "https://www.gstatic.com")  # Allow images from your domain and Google
CSP_FONT_SRC = (
    "'self'", 
    "fonts.gstatic.com", 
    "https://fonts.gstatic.com", 
)
CSP_CONNECT_SRC = (
    "'self'",
    "https://csp.withgoogle.com",  # Allow Google sign-in API sources
    "https://accounts.google.com",
    "https://accounts.google.com/gsi/",
    "https://apis.google.com",
)
CSP_FRAME_SRC = ("'none'","https://accounts.google.com/gsi/")  # Disallow embedding in iframes
CSP_OBJECT_SRC = ("'none'", "https://accounts.google.com/gsi/")  # Disallow Flash and other embedded objects
CSP_MEDIA_SRC = ("'self'",)

# Allow Alpine.js & HTMX if using them
CSP_SCRIPT_SRC += ("'unsafe-eval'",)  # Required for Alpine.js dynamic features
# CSP_REPORT_URI = "/csp-report/"  # Endpoint to capture CSP violation reports


# Misc settings / Just to keep sqids same / Not sensitive data
DJANGO_SQIDS_MIN_LENGTH=4
DJANGO_SQIDS_ALPHABET="gmjqnhr6py1viw87s0uk9oczx4dt5blaf3e2"

from django.urls import reverse_lazy
LOGIN_URL = reverse_lazy('accounts:login')

# GOOGLE SOCIAL LOGIN SETTINGS
GOOGLE_CLIENT_ID = config('GOOGLE_CLIENT_ID')
GOOGLE_CLIENT_SECRET = config('GOOGLE_CLIENT_SECRET')

GOOGLE_OAUTH_CLIENT_ID  = config('GOOGLE_CLIENT_ID')
# We need these lines below to allow the Google sign in popup to work.
SECURE_REFERRER_POLICY = 'no-referrer-when-downgrade'
SECURE_CROSS_ORIGIN_OPENER_POLICY = "same-origin-allow-popups"


if DEBUG:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
            "LOCATION": "my-local-memory-cache",
        }
    }
else:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.redis.RedisCache",
            "LOCATION": config("CELERY_BROKER_REDIS_URL", default="redis://localhost:6379"),
        }
    }
    