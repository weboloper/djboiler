"""
Django settings for myapp project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from decouple import Config,Csv, RepositoryEnv
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Detect environment (default to 'local' if not set)
ENVIRONMENT = os.getenv('DJANGO_ENV', 'dev')

# Define env file path based on environment
env_file =  f".env.{ENVIRONMENT}"

# Check if the environment file exists before trying to load it
if not os.path.exists(env_file):
    raise FileNotFoundError(f"The environment file {env_file} does not exist. Please create it.")

# Load the specified environment file
config = Config(RepositoryEnv(env_file))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY =  config('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG')

ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv())
# CORS_ALLOWED_ORIGINS = config('CORS_ALLOWED_ORIGINS', cast=Csv())

AUTH_USER_MODEL = 'accounts.User'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "django_celery_beat",
    "django_celery_results",
    'storages',
    'corsheaders',
    'django_filters',
    'rest_framework',
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    'core',

    'accounts'
]

MIDDLEWARE = [
    "csp.middleware.CSPMiddleware",  # Add this line
    'django.middleware.security.SecurityMiddleware',
    "myapp.middleware.SecurityHeadersMiddleware",  # Add custom security headers middleware
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
]

ROOT_URLCONF = 'myapp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS':  [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myapp.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'tr-TR'

TIME_ZONE = 'Europe/Istanbul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# Define STATIC and MEDIA settings
STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

MEDIA_URL = "media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Additional locations of static files (Only for local & S3)
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

STORAGE_BACKEND = config('STORAGE_BACKEND', default="whitenoise")
STORAGES = {
    "default": {},  # Will be set dynamically
    "staticfiles": {},  # Will be set dynamically
}

if STORAGE_BACKEND == "s3":
    # Use S3 for both media and static files
    STORAGES["default"]["BACKEND"] = "storages.backends.s3.S3Storage"
    STORAGES["staticfiles"]["BACKEND"] = "storages.backends.s3.S3Storage"

    AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME')
    AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
    AWS_S3_REGION_NAME = config('AWS_S3_REGION_NAME', default="eu-north-1")
    AWS_S3_SIGNATURE_VERSION = 's3v4'

    AWS_QUERYSTRING_AUTH = False  # Public URLs for static/media files
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',  # Optimize caching
    }
    AWS_CUSTOM_DOMAIN = f'{config('AWS_STORAGE_BUCKET_NAME')}.amazonaws.com/'
    AWS_DEFAULT_ACL = None  # Avoids issues with public/private access
    AWS_S3_FILE_OVERWRITE = False  # Prevents overwriting files with same name

    STATICFILES_DIRS = []  # Avoid duplicate static file handling

elif STORAGE_BACKEND == "whitenoise":
    # Use WhiteNoise for static, local for media. Production (Heroku, Docker)
    STORAGES["default"]["BACKEND"] = "django.core.files.storage.FileSystemStorage"
    STORAGES["staticfiles"]["BACKEND"] = "whitenoise.storage.CompressedManifestStaticFilesStorage"

    WHITENOISE_RUNSERVER_NOSTATIC = True  # Prevents Djangoâ€™s dev server from interfering with WhiteNoise
    STATICFILES_DIRS = []  # Avoid duplicate static file handling

else:  # Default: Local file system storage (Nginx setup)
    STORAGES["default"]["BACKEND"] = "django.core.files.storage.FileSystemStorage"
    STORAGES["staticfiles"]["BACKEND"] = "django.contrib.staticfiles.storage.StaticFilesStorage"

    # No need to override STATIC_ROOT and MEDIA_ROOT again
    # They are already set globally 
    STATIC_ROOT = config('STATIC_ROOT')   # Make sure this is correct
    MEDIA_ROOT = config('MEDIA_ROOT')  # Make sure this is correct


# Set file upload permissions globally (applies to all storage types)
FILE_UPLOAD_PERMISSIONS = 0o644  # Ensures uploaded files are readable by web server

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#REST FRAMEWORK

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
        'rest_framework.permissions.IsAuthenticated'
    ],
     'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    # 'EXCEPTION_HANDLER': 'app.utils.custom_exception_handler',
  
}

from datetime import timedelta 

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=3),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
}

CSRF_COOKIE_SAMESITE = "Lax"
SESSION_COOKIE_SAMESITE = "Lax"
CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_HTTPONLY = True



 




